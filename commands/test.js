const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { developmentGuildInvite } = require('../config.json');
const fs = require('fs-extra');
// const { readFile } = require('fs/promises');

// Needed for the wait function
// const wait = require('node:timers/promises').setTimeout;


module.exports = {
    data: new SlashCommandBuilder()
        .setName('test')
        .setDescription('A command for testing smaller portions of bigger commands.')
        .addStringOption(option =>
            option.setName('testinput')
                .setDescription('a Test input for the command')
                .setRequired(true)),

    async execute(interaction) {

        const novelTitle = interaction.options.getString('testinput');
        // INSERT SANITIZATION HERE
        if (!novelTitle) return interaction.channel.reply('You must provide a title to search!');
        if (novelTitle.length > 100) return interaction.channel.reply('The novel title cannot exceed 100 characters');
        await interaction.deferReply();
        // let novelMetadata;
        // await fs.readFile('./novels/temp/meta.json', 'utf8', function(err, data) {
        //     if (err) throw err;
        //     novelMetadata = JSON.parse(data);
        // });

        const novelMetadata = await fs.readJson('./novels/temp/meta.json');


        const novelEmbed = new EmbedBuilder()
            .setAuthor({ name: `${interaction.client.user.username}`, url: `${developmentGuildInvite}`, iconURL: `${interaction.client.user.avatarURL()}` })
            .setColor(0xFFFF00)
            .setTitle('Search Result:')
            .setDescription(`This was automagically generated by ${interaction.client.user.tag}\nfor ${interaction.user.username}.`)
            .addFields(
                { name: 'Novel URL:', value: novelMetadata.novel.url, inline: false },
            )
            .setTimestamp();

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('correctResult')
                    .setLabel('Correct Result')
                    .setStyle(ButtonStyle.Success),

                new ButtonBuilder()
                    .setCustomId('incorrectResult')
                    .setLabel('Incorrect Result')
                    .setStyle(ButtonStyle.Danger),
            );

        await interaction.followUp({
            embeds: [novelEmbed],
            components: [row],
        });

    },
};