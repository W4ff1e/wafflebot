const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder } = require('discord.js');
const { developmentGuildInvite } = require('../config.json');
const { exec } = require('child_process');

// Needed for the wait function
const wait = require('node:timers/promises').setTimeout;


module.exports = {
    data: new SlashCommandBuilder()
        .setName('novelsearch')
        .setDescription('Using the lncrawl binary, search for lightnovels from 197 different sources.')
        .addStringOption(option =>
            option.setName('noveltitle')
                .setDescription('The title of the novel to search')
                .setRequired(true)),

    async execute(interaction) {

        const novelTitle = interaction.options.getString('noveltitle');
        // INSERT SANITIZATION HERE
        if (!novelTitle) return interaction.channel.send('You must provide a title to search!');
        if (novelTitle.length > 100) return interaction.channel.send('The novel title cannot exceed 100 characters');

        await interaction.reply(`Searching for: "${novelTitle}"...`);

        exec(`lncrawl.exe -q "${novelTitle}" --first 1 --add-source-url -o ./novels/temp --format PDF --auto-proxy -o /novels/temp --filename-only --filename novelresult --close-directly --suppress`, function(err, stdout) {
            console.log(err);
            console.log(stdout);
        });

        // REMOVE ASAP
        wait(300000);

        const novelEmbed = new EmbedBuilder()
            .setAuthor({ name: `${interaction.client.user.username}`, url: `${developmentGuildInvite}`, iconURL: `${interaction.client.user.avatarURL()}` })
            .setColor(0xFFFF00)
            .setTitle('Search Result:')
            .setDescription(`This was automagically generated by ${interaction.client.user.tag}`)
            .addFields(
                { name: 'Novel URL:', value: novelTitle, inline: false },
            )
            .setTimestamp();

        const novelPDF = new AttachmentBuilder()
            .setFile('./novels/temp/pdf/novelresult.pdf')
            // .setDescription('This is the first chapter of')
            .setName(`${novelTitle}`);

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('correct')
                    .setLabel('Correct Result')
                    .setStyle(ButtonStyle.Success),

                new ButtonBuilder()
                    .setCustomId('incorrect')
                    .setLabel('Incorrect Result')
                    .setStyle(ButtonStyle.Danger),
            );

        await interaction.followUp({
            embeds: [novelEmbed],
            components: [row],
        });
        await interaction.followUp({
            files: [novelPDF],
        });
    },
};