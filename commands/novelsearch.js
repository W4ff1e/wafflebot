const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder, Events } = require('discord.js');
const { developmentGuildInvite } = require('../config.json');
const fs = require('fs-extra');
// const { readFile } = require('fs/promises');
const spawnAsync = require('@expo/spawn-async');

// Needed for the wait function
// const wait = require('node:timers/promises').setTimeout;


module.exports = {
    data: new SlashCommandBuilder()
        .setName('novelsearch')
        .setDescription('Using the lncrawl binary, search for lightnovels from 197 different sources.')
        .addStringOption(option =>
            option.setName('noveltitle')
                .setDescription('The title of the novel to search')
                .setRequired(true)),

    async execute(interaction) {

        const novelTitle = interaction.options.getString('noveltitle');
        // INSERT SANITIZATION HERE
        if (!novelTitle) return interaction.channel.send('You must provide a title to search!');
        if (novelTitle.length > 100) return interaction.channel.send('The novel title cannot exceed 100 characters');

        await interaction.reply(`Searching for: "**${novelTitle}**"...\n*This could take up to 5 minutes.*`);

        console.log('Beginning Search...');
        const novelSearchShell = spawnAsync('lncrawl.exe', ['-q', `${novelTitle}`, '-x', 'lightnovelpub|novelfull', '--first', '1', '--add-source-url', '--output', './novels/temp', '--force', '--format', 'PDF', '--filename-only', '--filename', 'novelresult', '--close-directly', '--suppress']);
        // const childProcess = novelSearchShell.child;
        // childProcess.stdout.on('data', (data) => {
        //     console.log(`novelSearchShell stdout: ${data}`);
        // });
        // childProcess.stderr.on('data', (data) => {
        //     console.error(`novelSearchShell stderr: ${data}`);
        // });
        await novelSearchShell;
        // await execute(`lncrawl.exe -q "${novelTitle}" --first 1 --add-source-url -o ./novels/temp --format PDF --auto-proxy --filename-only --filename novelresult --close-directly --suppress`);

        const novelMetadata = await fs.readJson('./novels/temp/meta.json');

        const novelEmbed = new EmbedBuilder()
            .setAuthor({ name: `${interaction.client.user.username}`, url: `${developmentGuildInvite}`, iconURL: `${interaction.client.user.avatarURL()}` })
            .setColor(0xFFFF00)
            .setTitle(`Search Result for: ${novelTitle}`)
            .setDescription(`This was automagically generated by ${interaction.client.user.tag}\nfor ${interaction.user.username}.`)
            .addFields(
                { name: 'Novel URL:', value: novelMetadata.novel.url, inline: false },
            )
            .setTimestamp();

        const novelPDF = new AttachmentBuilder()
            .setFile('./novels/temp/pdf/novelresult.pdf')
            // .setDescription('This is the first chapter of')
            .setName(`${novelTitle}.pdf`);

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('correctResult')
                    .setLabel('Correct Result')
                    .setStyle(ButtonStyle.Success),

                new ButtonBuilder()
                    .setCustomId('incorrectResult')
                    .setLabel('Incorrect Result')
                    .setStyle(ButtonStyle.Danger),
            );

        await interaction.followUp({
            embeds: [novelEmbed],
            components: [row],
            files: [novelPDF],
        });

        // interaction.client.on(Events.InteractionCreate, interaction => {
        //     if (!interaction.isButton()) return;
        //     console.log(interaction);
        // });
    },
};